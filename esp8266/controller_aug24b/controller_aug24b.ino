#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "controller"
  https://create.arduino.cc/cloud/things/20667662-f40f-49e3-8bdd-96a367fdaaec 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float invEnd;
  float chargeStart;
  float chargeEnd;
  int watts;
  float invStart;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <ESP8266HTTPClient.h>


int updateCounter = 0;
int minutes = 0;
int lastupdateTime = -1;

String host      = "http://api.timezonedb.com/v2/get-time-zone?key=UUX0VYQIWN7K&format=xml&fields=formatted&by=zone&zone=America/Chicago";
String payload;


void tzdb() {
  int counter = 0;
  int httpCode = 0;                                        // Variable to hold received data
  WiFiClient client;
  HTTPClient http;                                          // Declare an object of class HTTPClient

  while (httpCode == 0 && counter++ < 60) {                             // if no data is in
    delay(1000);                                           // wait a sec
    http.begin(client, host);                                     // and try again
    httpCode = http.GET();
  }
  if(counter < 60) {
    payload = http.getString();                        // Save response as string
    //Serial.println(payload); 
    parse_response();// Show response
    lastupdateTime = millis()/60000;
  } else {
    if(lastupdateTime > 0) {
      unsigned long diff = millis()/60000 - lastupdateTime;
      if(diff > 30) ESP.restart();
      minutes += (int) diff;
    }
  }

  http.end();     // Close connection to timezonedb
  
}

void parse_response() {
  int colon = payload.indexOf(':');                 // Set the first colon in time as reference point
  int d;                                                        // Variables to hold data as integers
  int mo;
  int y;
  int h;
  int mi;
  int s;

  String nowday = payload.substring(colon - 5, colon - 3);     // Get data as substring
  d = nowday.toInt();                                                // and convert to int
  String nowmonth = payload.substring(colon - 8, colon - 6);
  mo = nowmonth.toInt();
  String nowyear = payload.substring(colon - 13, colon - 9);
  y = nowyear.toInt();

  String nowhour = payload.substring(colon - 2, colon);
  h = nowhour.toInt();
  String nowmin = payload.substring(colon + 1, colon + 3);
  mi = nowmin.toInt();
  String nowsec = payload.substring(colon + 4, colon + 6);
  s = nowsec.toInt();
  minutes = h * 60 + mi;
  Serial.print("[0 ");
  Serial.print(minutes);
  Serial.println("]");
}


void setup() {
  

  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
 
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(4);
  ArduinoCloud.printDebugInfo();
  minutes = 0;
}

void loop() {
  ArduinoCloud.update();
  if(updateCounter == 0) {
    tzdb();
    onInvStartChange();
    onWattsChange();
    onInvEndChange();
    onChargeStartChange();
    onChargeEndChange();
  }
  updateCounter = (updateCounter + 1) % 60;
  delay(1000);
  
}

void onInvStartChange() {
  Serial.print("[1 ");
  Serial.print((int)(invStart * 60));
  Serial.println("]");
}

void onWattsChange() {
  Serial.print("[2 ");
  Serial.print((int)(watts * 60));
  Serial.println("]");
}

void onInvEndChange() {
  Serial.print("[3 ");
  Serial.print((int)(invEnd * 60));
  Serial.println("]");
  // Do something
}

void onChargeStartChange() {
  Serial.print("[4 ");
  Serial.print((int)(chargeStart * 60));
  Serial.println("]");
}

void onChargeEndChange() {
  Serial.print("[5 ");
  Serial.print((int)(chargeEnd * 60));
  Serial.println("]");
}


